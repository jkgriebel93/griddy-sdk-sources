name: Generate and Publish SDKs with Speakeasy

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'openapi/nfl-com-api.yaml'
      - '.speakeasy/**'
  workflow_dispatch:

jobs:
  generate-python-sdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Install Speakeasy CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/speakeasy-api/speakeasy/main/install.sh | bash -s -- -b /usr/local/bin
      - name: Generate Python SDK
        run: |
          speakeasy generate sdk \
            --schema ./openapi/nfl-com-api.yaml \
            --lang python \
            --out ./python-sdk \
            -y

      - name: Setup Python and uv
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure Python SDK for uv
        working-directory: python-sdk
        run: |
          # Add pyproject.toml build system configuration for uv
          if [ ! -f pyproject.toml ]; then
            cat > pyproject.toml << 'EOF'
          [build-system]
          requires = ["hatchling"]
          build-backend = "hatchling.build"

          [project]
          name = "griddy-nfl"
          dynamic = ["version"]
          description = "Python SDK for NFL API"
          readme = "README.md"
          requires-python = ">=3.13"
          dependencies = []

          [tool.hatch.version]
          path = "src/griddy_nfl/__init__.py"
          EOF
          fi

      - name: Checkout Python SDK repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/griddy-nfl-python
          token: ${{ secrets.SDK_DEPLOY_TOKEN }}
          path: python-sdk-repo

      - name: Copy generated SDK to repository
        run: |
          # Preserve custom authorization wrapper if it exists
          if [ -f python-sdk-repo/griddy_nfl/auth.py ]; then
            cp python-sdk-repo/griddy_nfl/auth.py /tmp/auth.py
          fi

          rm -rf python-sdk-repo/*
          cp -r python-sdk/* python-sdk-repo/

          # Restore custom authorization wrapper
          if [ -f /tmp/auth.py ]; then
            cp /tmp/auth.py python-sdk-repo/griddy_nfl/auth.py
          fi

      - name: Commit and push Python SDK
        working-directory: python-sdk-repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update SDK from OpenAPI spec [skip ci]" && git push)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get CodeArtifact authorization token
        id: codeartifact-token
        run: |
          TOKEN=$(aws codeartifact get-authorization-token \
            --domain ${{ secrets.CODEARTIFACT_DOMAIN }} \
            --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} \
            --query authorizationToken \
            --output text)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

          REPO_URL=$(aws codeartifact get-repository-endpoint \
            --domain ${{ secrets.CODEARTIFACT_DOMAIN }} \
            --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} \
            --repository ${{ secrets.CODEARTIFACT_REPO }} \
            --format pypi \
            --query repositoryEndpoint \
            --output text)
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT

      - name: Build Python package
        working-directory: python-sdk-repo
        run: |
          uv build

      - name: Publish to CodeArtifact
        working-directory: python-sdk-repo
        env:
          CODEARTIFACT_TOKEN: ${{ steps.codeartifact-token.outputs.token }}
          REPO_URL: ${{ steps.codeartifact-token.outputs.repo_url }}
        run: |
          # Configure uv to use CodeArtifact
          uv publish \
            --publish-url "${REPO_URL}simple/" \
            --token "aws:${CODEARTIFACT_TOKEN}" \
            --username aws

  notify-sdk-repos:
    runs-on: ubuntu-latest
    needs: generate-python-sdk
    steps:
      - name: Trigger Python SDK Regeneration
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.SDK_DEPLOY_TOKEN }}" \
            https://api.github.com/repos/jkgriebel93/griddy-nfl-python/dispatches \
            -d '{"event_type":"spec-updated"}'
